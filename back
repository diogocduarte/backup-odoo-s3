#!/bin/bash

# Backup Odoo Server to S3
#
# Requirements:
# - sudo apt-install p7zip-full
# - pip install awscli --upgrade --user
#
# Install:
# - aws configure
# - git clone <repo-url>
# - vim ~/.bkodoorc (add the following vars)
#
#    SERVER_NAME='odoogap-www-server'
#    DB_NAME='database1'
#    DATA_FOLDER='/opt/odoo/data'
#
# Usage:
# > ./back
#
# Crontab:
# crontab -e (add the following)
# 0 10 * * * /home/ogap/.backup/back --backup >/dev/null 2>&1
# 0 10 * * * /home/ogap/.backup/back --report >/dev/null 2>&1
#
# Author:
# Diogo Duarte <dduarte@odoogap.com>


p7zip_cmd=
aws_cmd=
bc_cmd=
backup_folder=
backup_root_folder="~/backups/automatic-dumps/"
backup_root_folder="/tmp/automatic-dumps/"
last_error=


backup_mode=
report_mode=
silent=0


# consts
C_MAKE_ME_SILENT=1
C_LAST_BACKUPS_CNT_TO_COMPARE_DEFAULT=3


# color palette
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[1;33m'
C_PURPLE='\033[0;35m'
C_NC='\033[0m'


# -------------------------------------------------------------------------
function report_s3_backups(){
   backups="$(aws s3 ls --human-readable $S3_URL)"
   if [ $? -ne 0 ]; then
      error "Cannot get list of backups, bucket path '$S3_URL'" 3
      return 1
   fi

   local last_backups_cnt_to_compare=$LAST_BACKUPS_CNT_TO_COMPARE
   if [ -z "$last_backups_cnt_to_compare" ]; then
      last_backups_cnt_to_compare=$C_LAST_BACKUPS_CNT_TO_COMPARE_DEFAULT
      warning "Option 'LAST_BACKUPS_CNT_TO_COMPARE' was not set. Going to use default value: $C_LAST_BACKUPS_CNT_TO_COMPARE_DEFAULT" 1 
   fi

   earliest_backup=$(echo "$backups" | tail -1 | awk '{print $1}')
   earliest_backup_size=$(echo "$backups" | tail -1 | awk '{print $3,$4}')
   oldest_backup=$(echo "$backups" | head -1 | awk '{print $1}')

   debug "backup info: oldest=$oldest_backup, earliest=$earliest_backup, earliest size=$earliest_backup_size" 1

   # are the backups size growing? last three backups checks
   #
   # sort by date and by size should retain the order
   #
   data="$(aws s3 ls $S3_URL | awk '{print $1,$2,$3}' | sed 's/ /_/' | tail -$last_backups_cnt_to_compare)"
   diff <(echo "$data" | sort -k1) <(echo "$data" | sort -k2) >/dev/null
   if [ $? -eq 0 ]; then
      ok "Backups are fine. Size of last $last_backups_cnt_to_compare backups backup is growing" 1
   else
      error "Size of last $last_backups_cnt_to_compare backups backup is _NOT_ growing" 1
      return 1
   fi

   return 0
}


# -------------------------------------------------------------------------
function provide_backup_report(){
   if [ ! -z "$S3_URL" ]; then
      report_s3_backups
   else
      error "Unknown backup type" 1
      return 1
   fi
}


# -------------------------------------------------------------------------
function ident(){
   printf '%*s' $(($1*3)) ""
}



# -------------------------------------------------------------------------
function info(){
   if [ $silent -eq 0 ]; then
      local identation=$2
      [ -z "$identation" ] && identation=0
      echo -e "$(ident $identation)$1"
   fi
}


# -------------------------------------------------------------------------
function ok(){
   local identation=$2
   [ -z "$2" ] && identation=0
   echo -e "${C_GREEN}$(ident $identation)$1${C_NC}"
}

# -------------------------------------------------------------------------
function debug(){
   local identation=$2
   [ -z "$2" ] && identation=0
   echo -e "${C_PURPLE}$(ident $identation)$1${C_NC}"
}


# -------------------------------------------------------------------------
function warning(){
   local identation=$2
   [ -z "$2" ] && identation=0
   echo -e "${C_YELLOW}$(ident $identation)$1${C_NC}"
}


# -------------------------------------------------------------------------
function error() {
   local identation=$2
   [ -z "$2" ] && identation=0
   >&2 echo -e "${C_RED}$(ident $identation)$1${C_NC}"
}


# ------------------------------------------------------------------------------------------------------------
function usage() {
  cat << __USAGE__ >&2
Usage: ${0} 
Options:
   
   --backup|-b)    create backup
   --report|-r)    provide report

   --help|-h)   usage
__USAGE__
} 



# ------------------------------------------------------------------------------------------------------------
function get_options(){
   local OPTIONS=$@
   local ARGUMENTS=($OPTIONS)
   local index=0

   for ARG in $OPTIONS; do
       index=$(($index+1));
       case $ARG in
         --backup|-b)    backup_mode=x;;
         --report|-r)    report_mode=x;;

         --help|-h) usage; exit 0;;
      esac
   done

   [ ! -z "$report_mode" ] && silent=$C_MAKE_ME_SILENT
}



# -------------------------------------------------------------------------
function cleanup(){
   info "cleaning up..."
   # TODO
   # rm -rf $backup_root_folder/* 
}


# -------------------------------------------------------------------------
function on_exit(){
   local rc=$?
   cleanup

   if [ $rc -ne 0 ]; then
      echo "Got error message. Going to send slack notification..."
      # TODO
      # slack odoo "$SERVER_NAME failed during backup with exit code $rc. Check log file (if any). Last message was: $last_error"
   fi
}



# -------------------------------------------------------------------------
function init(){
   info "Calling init script..."
   if [ -e server.conf ]; then
      info "Reading default config server.conf"
      source server.conf
   fi
   if [ -e ~/.bkodoorc ]; then
      info "Reading user config ~/.bkodoorc"
      source ~/.bkodoorc
   fi


   local rc=0
   if [ -z "$SERVER_NAME" ]; then
      error "SERVER_NAME not specified"
      rc=1
   fi
   
   if [ -z "$DB_NAME" ]; then 
      error "DB_NAME not specified"
      rc=2
   fi

   if [ -z "$DATA_FOLDER" ]; then
      error "DATA_FOLDER not specified"
      rc=3
   fi


   if [ -z "$backup_mode" ] && [ -z "$report_mode" ]; then
      error "You should pass either --backup or --report"
      rc=5
   fi

   if [ $rc -eq 0 ] && [ ! -z "$backup_mode" ]; then
      now=$(date +"%Y_%d_%m_%H%M")
      backup_folder="backup_${SERVER_NAME}_$now"
      mkdir -p "$backup_root_folder/$backup_folder"
      info "Current backup folder: $backup_root_folder/$backup_folder"
   fi

   return $rc
}



# -------------------------------------------------------------------------
function check_dependencies() {
   info "Checking check_dependencies"
   local rc=0
   p7zip_cmd=$(which 7z)
   if [ -z "$p7zip_cmd" ]; then
      error "p7zip-full not found, please install p7zip-full"
      rc=10
   fi

   aws_cmd=$(which aws)
   if [ -z "$aws_cmd" ]; then
      error "aws cli not found, please install awscli"
      rc=11
   fi

   bc_cmd=$(which bc)
   if [ -z "$bc_cmd" ]; then
      error "bc not found, please install it"
      rc=12
   fi

   return $rc
}



# -------------------------------------------------------------------------
function do_backup(){
   info "running backup procedure..."
   local rc=0


   local last_backup=$($aws_cmd s3 ls ${S3_URL} | tail -1)
   rc=$?
   if [ $rc -ne 0 ]; then
      error "Failed get last backup size..."
      return 1
   fi


   pg_dump -Fc ${DB_NAME} -f $backup_root_folder/$backup_folder/${DB_NAME}.dump && \
      cp -rf $DATA_FOLDER/* $backup_root_folder/$backup_folder && \
      info "archiving dump...." && \
      $p7zip_cmd a $backup_root_folder/${backup_folder}.7z $backup_root_folder/$backup_folder >/dev/null

   rc=$?
   if [ $rc -ne 0 ]; then
      error "Failed during backup creation..."
      return 2
   fi

   local current_backup_size=$(ls -l  $backup_root_folder/${backup_folder}.7z | awk '{print $5}')
   local last_backup_size=$(echo $last_backup | awk '{print $3}')


   echo "last backup size: $last_backup_size, current backup size: $current_backup_size"

   # current backup size should not be less then 95% of the last one
   if [ ! -z "$last_backup_size" ] && [ $current_backup_size -gt $(echo "scale=0; $last_backup_size*95/100" | $bc_cmd) ]; then
      $aws_cmd s3 mv $backup_root_folder/${backup_folder}.7z ${S3_URL}${backup_folder}.7z
   else
      error "last backup size=$last_backup_size, current_backup_size=$current_backup_size. Seems that current less than 95% percent of the previous one"
      return 3
   fi

   return 0
}




# -------------------------------------------------------------------------
function slack(){
   curl -X POST --data-urlencode "payload={\
                        'channel': '#$1', \
                        'username': 'monit', \
                        'text': '$2', \
                        'icon_emoji': ':gear:'}" \
         ${SLACK_HOOK} 
}


# ---------------  MAIN   ---------------------------------------------------
trap on_exit EXIT SIGINT SIGTERM SIGQUIT


get_options $@

check_dependencies || exit $?
init || exit $?


if [ ! -z "$backup_mode" ]; then
   do_backup || exit $?
fi


if [ ! -z "$report_mode" ]; then
   provide_backup_report || exit $?
fi